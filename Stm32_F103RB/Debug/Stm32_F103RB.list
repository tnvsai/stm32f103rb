
Stm32_F103RB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b8  08000130  08000130  00001130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002e8  080002e8  00002014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002e8  080002e8  00002014  2**0
                  CONTENTS
  4 .ARM          00000000  080002e8  080002e8  00002014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002e8  080002e8  00002014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002e8  080002e8  000012e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080002ec  080002ec  000012ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  080002f0  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000014  08000304  00002014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000030  08000304  00002030  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00002014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000214  00000000  00000000  0000203d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000117  00000000  00000000  00002251  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000068  00000000  00000000  00002368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000040  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ee38  00000000  00000000  00002410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000a73  00000000  00000000  00011248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00052e74  00000000  00000000  00011cbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00064b2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000080  00000000  00000000  00064b74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00064bf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	@ (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	@ (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	@ (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000014 	.word	0x20000014
 800014c:	00000000 	.word	0x00000000
 8000150:	080002d0 	.word	0x080002d0

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	@ (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	@ (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	@ (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000018 	.word	0x20000018
 800016c:	080002d0 	.word	0x080002d0

08000170 <BuildinLED_Blink>:




void BuildinLED_Blink()
{
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	/* Reset register */
	*RCC_APB2ENR&=0x0000;
 8000174:	4b25      	ldr	r3, [pc, #148]	@ (800020c <BuildinLED_Blink+0x9c>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2200      	movs	r2, #0
 800017a:	601a      	str	r2, [r3, #0]

	/* Enable GPIOA */
	*RCC_APB2ENR|=(1<<2);
 800017c:	4b23      	ldr	r3, [pc, #140]	@ (800020c <BuildinLED_Blink+0x9c>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	681a      	ldr	r2, [r3, #0]
 8000182:	4b22      	ldr	r3, [pc, #136]	@ (800020c <BuildinLED_Blink+0x9c>)
 8000184:	681b      	ldr	r3, [r3, #0]
 8000186:	f042 0204 	orr.w	r2, r2, #4
 800018a:	601a      	str	r2, [r3, #0]

	/* Enable GPIOC */
	*RCC_APB2ENR|=(1<<4);
 800018c:	4b1f      	ldr	r3, [pc, #124]	@ (800020c <BuildinLED_Blink+0x9c>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	681a      	ldr	r2, [r3, #0]
 8000192:	4b1e      	ldr	r3, [pc, #120]	@ (800020c <BuildinLED_Blink+0x9c>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	f042 0210 	orr.w	r2, r2, #16
 800019a:	601a      	str	r2, [r3, #0]

	/* Enable ALTERNATE function  */
		*RCC_APB2ENR|=(1<<0);
 800019c:	4b1b      	ldr	r3, [pc, #108]	@ (800020c <BuildinLED_Blink+0x9c>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	681a      	ldr	r2, [r3, #0]
 80001a2:	4b1a      	ldr	r3, [pc, #104]	@ (800020c <BuildinLED_Blink+0x9c>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	f042 0201 	orr.w	r2, r2, #1
 80001aa:	601a      	str	r2, [r3, #0]

	/* Reset register */
	*GPIOA_CRL &= 0x0000;
 80001ac:	4b18      	ldr	r3, [pc, #96]	@ (8000210 <BuildinLED_Blink+0xa0>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	2200      	movs	r2, #0
 80001b2:	601a      	str	r2, [r3, #0]

	/* Reset register */
	*GPIOC_CRH &= 0x0000;
 80001b4:	4b17      	ldr	r3, [pc, #92]	@ (8000214 <BuildinLED_Blink+0xa4>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	2200      	movs	r2, #0
 80001ba:	601a      	str	r2, [r3, #0]


	/* Set GPIOA as output */
	*GPIOA_CRL |=(2<<20);
 80001bc:	4b14      	ldr	r3, [pc, #80]	@ (8000210 <BuildinLED_Blink+0xa0>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	681a      	ldr	r2, [r3, #0]
 80001c2:	4b13      	ldr	r3, [pc, #76]	@ (8000210 <BuildinLED_Blink+0xa0>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	f442 1200 	orr.w	r2, r2, #2097152	@ 0x200000
 80001ca:	601a      	str	r2, [r3, #0]

	/* Set GPIOC as input */
	*GPIOC_CRH |=(2<<22);
 80001cc:	4b11      	ldr	r3, [pc, #68]	@ (8000214 <BuildinLED_Blink+0xa4>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	681a      	ldr	r2, [r3, #0]
 80001d2:	4b10      	ldr	r3, [pc, #64]	@ (8000214 <BuildinLED_Blink+0xa4>)
 80001d4:	681b      	ldr	r3, [r3, #0]
 80001d6:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80001da:	601a      	str	r2, [r3, #0]


	/* Loop forever */
	for(;;)
	{
		if((*GPIOC_IDR & (1 << 13)) == 0 )
 80001dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000218 <BuildinLED_Blink+0xa8>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80001e6:	2b00      	cmp	r3, #0
 80001e8:	d107      	bne.n	80001fa <BuildinLED_Blink+0x8a>
		{
			/* Togle GPIOA5*/
//			*GPIOA_ODR ^= (1<<5);
//			Delay(1000000);
			/* Set GPIO pin High */
			*GPIOA_ODR |= (1<<5);
 80001ea:	4b0c      	ldr	r3, [pc, #48]	@ (800021c <BuildinLED_Blink+0xac>)
 80001ec:	681b      	ldr	r3, [r3, #0]
 80001ee:	681a      	ldr	r2, [r3, #0]
 80001f0:	4b0a      	ldr	r3, [pc, #40]	@ (800021c <BuildinLED_Blink+0xac>)
 80001f2:	681b      	ldr	r3, [r3, #0]
 80001f4:	f042 0220 	orr.w	r2, r2, #32
 80001f8:	601a      	str	r2, [r3, #0]
		}
		/* Reset GPIO pin Low */
		*GPIOA_ODR &= ~(1<<5);
 80001fa:	4b08      	ldr	r3, [pc, #32]	@ (800021c <BuildinLED_Blink+0xac>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b06      	ldr	r3, [pc, #24]	@ (800021c <BuildinLED_Blink+0xac>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	f022 0220 	bic.w	r2, r2, #32
 8000208:	601a      	str	r2, [r3, #0]
		if((*GPIOC_IDR & (1 << 13)) == 0 )
 800020a:	e7e7      	b.n	80001dc <BuildinLED_Blink+0x6c>
 800020c:	20000000 	.word	0x20000000
 8000210:	20000004 	.word	0x20000004
 8000214:	20000008 	.word	0x20000008
 8000218:	20000010 	.word	0x20000010
 800021c:	2000000c 	.word	0x2000000c

08000220 <main>:
#include"api.h"
#include"stm32f103xb.h"


int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

	BuildinLED_Blink();
 8000224:	f7ff ffa4 	bl	8000170 <BuildinLED_Blink>
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000228:	b662      	cpsie	i
}
 800022a:	bf00      	nop
	__enable_irq();
	/* Loop forever */
	for(;;)
	{
		BuildinLED_Blink();
 800022c:	f7ff ffa0 	bl	8000170 <BuildinLED_Blink>
 8000230:	e7fc      	b.n	800022c <main+0xc>
	...

08000234 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000234:	480d      	ldr	r0, [pc, #52]	@ (800026c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000236:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000238:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800023c:	480c      	ldr	r0, [pc, #48]	@ (8000270 <LoopForever+0x6>)
  ldr r1, =_edata
 800023e:	490d      	ldr	r1, [pc, #52]	@ (8000274 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000240:	4a0d      	ldr	r2, [pc, #52]	@ (8000278 <LoopForever+0xe>)
  movs r3, #0
 8000242:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000244:	e002      	b.n	800024c <LoopCopyDataInit>

08000246 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000246:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000248:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800024a:	3304      	adds	r3, #4

0800024c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800024c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800024e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000250:	d3f9      	bcc.n	8000246 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000252:	4a0a      	ldr	r2, [pc, #40]	@ (800027c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000254:	4c0a      	ldr	r4, [pc, #40]	@ (8000280 <LoopForever+0x16>)
  movs r3, #0
 8000256:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000258:	e001      	b.n	800025e <LoopFillZerobss>

0800025a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800025a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800025c:	3204      	adds	r2, #4

0800025e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800025e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000260:	d3fb      	bcc.n	800025a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000262:	f000 f811 	bl	8000288 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000266:	f7ff ffdb 	bl	8000220 <main>

0800026a <LoopForever>:

LoopForever:
  b LoopForever
 800026a:	e7fe      	b.n	800026a <LoopForever>
  ldr   r0, =_estack
 800026c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000274:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000278:	080002f0 	.word	0x080002f0
  ldr r2, =_sbss
 800027c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000280:	20000030 	.word	0x20000030

08000284 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000284:	e7fe      	b.n	8000284 <ADC1_2_IRQHandler>
	...

08000288 <__libc_init_array>:
 8000288:	b570      	push	{r4, r5, r6, lr}
 800028a:	2600      	movs	r6, #0
 800028c:	4d0c      	ldr	r5, [pc, #48]	@ (80002c0 <__libc_init_array+0x38>)
 800028e:	4c0d      	ldr	r4, [pc, #52]	@ (80002c4 <__libc_init_array+0x3c>)
 8000290:	1b64      	subs	r4, r4, r5
 8000292:	10a4      	asrs	r4, r4, #2
 8000294:	42a6      	cmp	r6, r4
 8000296:	d109      	bne.n	80002ac <__libc_init_array+0x24>
 8000298:	f000 f81a 	bl	80002d0 <_init>
 800029c:	2600      	movs	r6, #0
 800029e:	4d0a      	ldr	r5, [pc, #40]	@ (80002c8 <__libc_init_array+0x40>)
 80002a0:	4c0a      	ldr	r4, [pc, #40]	@ (80002cc <__libc_init_array+0x44>)
 80002a2:	1b64      	subs	r4, r4, r5
 80002a4:	10a4      	asrs	r4, r4, #2
 80002a6:	42a6      	cmp	r6, r4
 80002a8:	d105      	bne.n	80002b6 <__libc_init_array+0x2e>
 80002aa:	bd70      	pop	{r4, r5, r6, pc}
 80002ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80002b0:	4798      	blx	r3
 80002b2:	3601      	adds	r6, #1
 80002b4:	e7ee      	b.n	8000294 <__libc_init_array+0xc>
 80002b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80002ba:	4798      	blx	r3
 80002bc:	3601      	adds	r6, #1
 80002be:	e7f2      	b.n	80002a6 <__libc_init_array+0x1e>
 80002c0:	080002e8 	.word	0x080002e8
 80002c4:	080002e8 	.word	0x080002e8
 80002c8:	080002e8 	.word	0x080002e8
 80002cc:	080002ec 	.word	0x080002ec

080002d0 <_init>:
 80002d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d2:	bf00      	nop
 80002d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002d6:	bc08      	pop	{r3}
 80002d8:	469e      	mov	lr, r3
 80002da:	4770      	bx	lr

080002dc <_fini>:
 80002dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002de:	bf00      	nop
 80002e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002e2:	bc08      	pop	{r3}
 80002e4:	469e      	mov	lr, r3
 80002e6:	4770      	bx	lr
